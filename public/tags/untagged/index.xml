<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Untagged on Alexander Weir</title>
    <link>http://localhost:1313/tags/untagged/</link>
    <description>Recent content in Untagged on Alexander Weir</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 15 Jul 2025 08:02:28 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A New Approach to Top-Down Modeling</title>
      <link>http://localhost:1313/posts/top-down-modeling/</link>
      <pubDate>Tue, 15 Jul 2025 08:02:28 -0400</pubDate>
      <guid>http://localhost:1313/posts/top-down-modeling/</guid>
      <description>&lt;pre&gt;&lt;code&gt;We&#39;ve all been there - one dimension change, one edited mate, and your whole SolidWorks assembly comes crashing down in a wave of red error messages, broken mates, and failed rebuild blings. Anyone who works with large assemblies has to deal with this frequently. As well as you may think you know your assembly, you will inevitably forget about a mate or other constraint somewhere that prevents you from changing exactly the dimension you need to change. SolidWorks doesn&#39;t help you a lot with this; the dozens of broken mates that will often result from a change like that do not do a great job of pointing towards the actual root of the problem, the one mate that the over-constraint comes from.&#xD;&#xA;The solution, as various websites and LLMs will point you to, is top-down modeling: a structured approach where each part is defined based on references to a single &amp;quot;skeleton&amp;quot; part that contains sketches and dimensions for your entire assembly. The promise is simple; every dimension change, every stretch or shrink or movement, seamlessly updates all associated parts to the appropriate sizes since they&#39;re all referencing the same part. In practice, however, modeling top-down ends up creating more problems than it solves.&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;difficulties&#34;&gt;Difficulties&lt;/h3&gt;&#xA;&lt;h4 id=&#34;rebuild-order&#34;&gt;Rebuild order&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Some issues are simply limitations of SolidWorks itself. Say you&#39;ve built a box. The top and bottom of the box have positions and dimensions defined by the skeleton, and the sides, for simplicity&#39;s sake, are defined to be at the edges of the top and bottom, so they just stretch depending on where the top and bottom are. This sounds great right up until you change the skeleton and SolidWorks decides to rebuild the sides first, so their positions are set at the old positions of the top and bottom rather than the new positions that the top and bottom should be at once SolidWorks gets around to rebuilding those. Unfortunately, once SolidWorks tries to rebuild the top and bottom, it will notice that the mates with the sides no longer work and will fail the rebuild. This is a very simplistic scenario, one that SolidWorks in reality would likely handle fine, but the concept applies as you build larger and larger assemblies.&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;sticky-errors&#34;&gt;&amp;ldquo;Sticky&amp;rdquo; errors&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;SolidWorks doesn&#39;t stop rebuilding once it runs across an error; it keeps rebuilding, attempting to find a stable state. Therefore, when too many parts depend on other parts, a single part failing its rebuild cascades to every other part that has a relationship to that part, however indirect the relationship may be. Sometimes, a feature or sketch gets pushed into a &amp;quot;sticky&amp;quot; invalid, unsolvable state, where even a reversion of the change can leave the feature completely broken. This happens frequently with sketches. When a sketch has external references that move slightly too far, it can be pushed into crossing over itself or flipping the direction of an essential dimension. When those changes create unsolvable geometry, SolidWorks can lock that sketch into place, keeping it from rebuilding properly regardless of the current state of the references. Your only options at this point are either to go manually redraw and redefine the sketch or to force close your document without saving, potentially losing you a lot of the work you&#39;ve put in.&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;feature-positioning&#34;&gt;Feature positioning&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;At an even more fundamental level, top-down modeling heavily limits how you may be used to building and editing assemblies. Imagine a scenario where you have an assembly with the skeleton and a plate with a number of bolts in it. The bolt holes could be defined a few different ways, but if you&#39;re top-down modeling, your hole positions at the very least will likely be defined by the skeleton either directly with a Coincident sketch relation or semi-indirectly with a Convert Entities command, either of which would work fine with either an Extruded Cut or a Hole Wizard command. Ideally, your skeleton part is mated to the origin for maximum stability, but this creates a serious problem. As soon as you move your plate to adjust its position in the assembly, your feature must stay in place relative to the origin, so the feature ends up in an unexpected position or perhaps fails entirely.&#xD;&#xA;Theoretically, the solution to this is to make sure your parts are fully defined position-wise within the assembly before setting up features that may reference the skeleton, but now you can&#39;t move your parts around or pull in a copy of those parts elsewhere in the assembly without putting in great effort to avoid breaking your in-context features. The incredible ease of SolidWorks assemblies and mates goes away significantly under top-down modeling.&#xD;&#xA;A possible solution to this problem would be to get rid of all position-based relations and instead referencing dimensions of the skeleton part. Unfortunately, that would mean manually mirroring much of the sketch structure from the skeleton for each part, which can be frustrating when you&#39;ve already built those sketches in the skeleton. Additionally, dimension-reference-based relations seem to be less reliable in even deep (Ctrl-Q) rebuilds, sometimes only resizing properly when you open the individual part file that contains the reference.&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;a-solution&#34;&gt;A Solution?&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;One of the best things about SolidWorks is its modularity. Each part can be built on its own, brought into an assembly, and assembled using just a few intuitive mates. To bring this level of modularity to &#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
